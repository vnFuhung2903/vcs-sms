// Code generated by MockGen. DO NOT EDIT.
// Source: E:\Code\VCS\vcs-sms\usecases\services\report.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/vnFuhung2903/vcs-sms/dto"
	entities "github.com/vnFuhung2903/vcs-sms/entities"
)

// MockIReportService is a mock of IReportService interface.
type MockIReportService struct {
	ctrl     *gomock.Controller
	recorder *MockIReportServiceMockRecorder
}

// MockIReportServiceMockRecorder is the mock recorder for MockIReportService.
type MockIReportServiceMockRecorder struct {
	mock *MockIReportService
}

// NewMockIReportService creates a new mock instance.
func NewMockIReportService(ctrl *gomock.Controller) *MockIReportService {
	mock := &MockIReportService{ctrl: ctrl}
	mock.recorder = &MockIReportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReportService) EXPECT() *MockIReportServiceMockRecorder {
	return m.recorder
}

// CalculateReportStatistic mocks base method.
func (m *MockIReportService) CalculateReportStatistic(data []*entities.Container, statusList map[string][]dto.EsStatus) (int, int, float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateReportStatistic", data, statusList)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(float64)
	return ret0, ret1, ret2
}

// CalculateReportStatistic indicates an expected call of CalculateReportStatistic.
func (mr *MockIReportServiceMockRecorder) CalculateReportStatistic(data, statusList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateReportStatistic", reflect.TypeOf((*MockIReportService)(nil).CalculateReportStatistic), data, statusList)
}

// SendEmail mocks base method.
func (m *MockIReportService) SendEmail(ctx context.Context, to string, totalCount, onCount, offCount int, totalUptime float64, startTime, endTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, to, totalCount, onCount, offCount, totalUptime, startTime, endTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockIReportServiceMockRecorder) SendEmail(ctx, to, totalCount, onCount, offCount, totalUptime, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockIReportService)(nil).SendEmail), ctx, to, totalCount, onCount, offCount, totalUptime, startTime, endTime)
}
