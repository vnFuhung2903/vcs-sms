// Code generated by MockGen. DO NOT EDIT.
// Source: E:\Code\VCS\vcs-sms\pkg\middlewares\jwt.go

// Package middlewares is a generated GoMock package.
package middlewares

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIJWTMiddleware is a mock of IJWTMiddleware interface.
type MockIJWTMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockIJWTMiddlewareMockRecorder
}

// MockIJWTMiddlewareMockRecorder is the mock recorder for MockIJWTMiddleware.
type MockIJWTMiddlewareMockRecorder struct {
	mock *MockIJWTMiddleware
}

// NewMockIJWTMiddleware creates a new mock instance.
func NewMockIJWTMiddleware(ctrl *gomock.Controller) *MockIJWTMiddleware {
	mock := &MockIJWTMiddleware{ctrl: ctrl}
	mock.recorder = &MockIJWTMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJWTMiddleware) EXPECT() *MockIJWTMiddlewareMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockIJWTMiddleware) GenerateJWT(context context.Context, userId, username string, scope []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", context, userId, username, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockIJWTMiddlewareMockRecorder) GenerateJWT(context, userId, username, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockIJWTMiddleware)(nil).GenerateJWT), context, userId, username, scope)
}

// RequireScope mocks base method.
func (m *MockIJWTMiddleware) RequireScope(requiredScope string) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireScope", requiredScope)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// RequireScope indicates an expected call of RequireScope.
func (mr *MockIJWTMiddlewareMockRecorder) RequireScope(requiredScope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireScope", reflect.TypeOf((*MockIJWTMiddleware)(nil).RequireScope), requiredScope)
}
