// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/docker/client.go

// Package docker is a generated GoMock package.
package docker

import (
	context "context"
	reflect "reflect"

	container "github.com/docker/docker/api/types/container"
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vnFuhung2903/vcs-sms/entities"
)

// MockIDockerClient is a mock of IDockerClient interface.
type MockIDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIDockerClientMockRecorder
}

// MockIDockerClientMockRecorder is the mock recorder for MockIDockerClient.
type MockIDockerClientMockRecorder struct {
	mock *MockIDockerClient
}

// NewMockIDockerClient creates a new mock instance.
func NewMockIDockerClient(ctrl *gomock.Controller) *MockIDockerClient {
	mock := &MockIDockerClient{ctrl: ctrl}
	mock.recorder = &MockIDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDockerClient) EXPECT() *MockIDockerClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIDockerClient) Create(ctx context.Context, name, imageName string) (*container.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, imageName)
	ret0, _ := ret[0].(*container.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIDockerClientMockRecorder) Create(ctx, name, imageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDockerClient)(nil).Create), ctx, name, imageName)
}

// Delete mocks base method.
func (m *MockIDockerClient) Delete(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDockerClientMockRecorder) Delete(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDockerClient)(nil).Delete), ctx, containerID)
}

// GetIpv4 mocks base method.
func (m *MockIDockerClient) GetIpv4(ctx context.Context, containerID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpv4", ctx, containerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpv4 indicates an expected call of GetIpv4.
func (mr *MockIDockerClientMockRecorder) GetIpv4(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpv4", reflect.TypeOf((*MockIDockerClient)(nil).GetIpv4), ctx, containerID)
}

// GetStatus mocks base method.
func (m *MockIDockerClient) GetStatus(ctx context.Context, containerID string) (entities.ContainerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, containerID)
	ret0, _ := ret[0].(entities.ContainerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockIDockerClientMockRecorder) GetStatus(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockIDockerClient)(nil).GetStatus), ctx, containerID)
}

// Start mocks base method.
func (m *MockIDockerClient) Start(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIDockerClientMockRecorder) Start(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIDockerClient)(nil).Start), ctx, containerID)
}

// Stop mocks base method.
func (m *MockIDockerClient) Stop(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIDockerClientMockRecorder) Stop(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIDockerClient)(nil).Stop), ctx, containerID)
}
