// Code generated by MockGen. DO NOT EDIT.
// Source: E:\Code\VCS\vcs-sms\usecases\services\healthcheck.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/vnFuhung2903/vcs-sms/dto"
)

// MockIHealthcheckService is a mock of IHealthcheckService interface.
type MockIHealthcheckService struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthcheckServiceMockRecorder
}

// MockIHealthcheckServiceMockRecorder is the mock recorder for MockIHealthcheckService.
type MockIHealthcheckServiceMockRecorder struct {
	mock *MockIHealthcheckService
}

// NewMockIHealthcheckService creates a new mock instance.
func NewMockIHealthcheckService(ctrl *gomock.Controller) *MockIHealthcheckService {
	mock := &MockIHealthcheckService{ctrl: ctrl}
	mock.recorder = &MockIHealthcheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthcheckService) EXPECT() *MockIHealthcheckServiceMockRecorder {
	return m.recorder
}

// GetEsStatus mocks base method.
func (m *MockIHealthcheckService) GetEsStatus(ctx context.Context, ids []string, limit int, startTime, endTime time.Time) (map[string][]dto.EsStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEsStatus", ctx, ids, limit, startTime, endTime)
	ret0, _ := ret[0].(map[string][]dto.EsStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEsStatus indicates an expected call of GetEsStatus.
func (mr *MockIHealthcheckServiceMockRecorder) GetEsStatus(ctx, ids, limit, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEsStatus", reflect.TypeOf((*MockIHealthcheckService)(nil).GetEsStatus), ctx, ids, limit, startTime, endTime)
}

// UpdateStatus mocks base method.
func (m *MockIHealthcheckService) UpdateStatus(ctx context.Context, statusList []dto.EsStatusUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, statusList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIHealthcheckServiceMockRecorder) UpdateStatus(ctx, statusList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIHealthcheckService)(nil).UpdateStatus), ctx, statusList)
}
