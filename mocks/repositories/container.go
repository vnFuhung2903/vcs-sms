// Code generated by MockGen. DO NOT EDIT.
// Source: E:\Code\VCS\vcs-sms\usecases\repositories\container.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/vnFuhung2903/vcs-sms/dto"
	entities "github.com/vnFuhung2903/vcs-sms/entities"
	repositories "github.com/vnFuhung2903/vcs-sms/usecases/repositories"
	gorm "gorm.io/gorm"
)

// MockIContainerRepository is a mock of IContainerRepository interface.
type MockIContainerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIContainerRepositoryMockRecorder
}

// MockIContainerRepositoryMockRecorder is the mock recorder for MockIContainerRepository.
type MockIContainerRepositoryMockRecorder struct {
	mock *MockIContainerRepository
}

// NewMockIContainerRepository creates a new mock instance.
func NewMockIContainerRepository(ctrl *gomock.Controller) *MockIContainerRepository {
	mock := &MockIContainerRepository{ctrl: ctrl}
	mock.recorder = &MockIContainerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContainerRepository) EXPECT() *MockIContainerRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockIContainerRepository) BeginTransaction(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockIContainerRepositoryMockRecorder) BeginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockIContainerRepository)(nil).BeginTransaction), ctx)
}

// Create mocks base method.
func (m *MockIContainerRepository) Create(containerId, containerName string, status entities.ContainerStatus, ipv4 string) (*entities.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", containerId, containerName, status, ipv4)
	ret0, _ := ret[0].(*entities.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIContainerRepositoryMockRecorder) Create(containerId, containerName, status, ipv4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIContainerRepository)(nil).Create), containerId, containerName, status, ipv4)
}

// Delete mocks base method.
func (m *MockIContainerRepository) Delete(containerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", containerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIContainerRepositoryMockRecorder) Delete(containerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIContainerRepository)(nil).Delete), containerId)
}

// FindById mocks base method.
func (m *MockIContainerRepository) FindById(containerId string) (*entities.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", containerId)
	ret0, _ := ret[0].(*entities.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIContainerRepositoryMockRecorder) FindById(containerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIContainerRepository)(nil).FindById), containerId)
}

// FindByName mocks base method.
func (m *MockIContainerRepository) FindByName(containerName string) (*entities.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", containerName)
	ret0, _ := ret[0].(*entities.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockIContainerRepositoryMockRecorder) FindByName(containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockIContainerRepository)(nil).FindByName), containerName)
}

// Update mocks base method.
func (m *MockIContainerRepository) Update(container *entities.Container, updateData dto.ContainerUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", container, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIContainerRepositoryMockRecorder) Update(container, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIContainerRepository)(nil).Update), container, updateData)
}

// View mocks base method.
func (m *MockIContainerRepository) View(filter dto.ContainerFilter, from, limit int, sort dto.ContainerSort) ([]*entities.Container, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", filter, from, limit, sort)
	ret0, _ := ret[0].([]*entities.Container)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// View indicates an expected call of View.
func (mr *MockIContainerRepositoryMockRecorder) View(filter, from, limit, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockIContainerRepository)(nil).View), filter, from, limit, sort)
}

// WithTransaction mocks base method.
func (m *MockIContainerRepository) WithTransaction(tx *gorm.DB) repositories.IContainerRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", tx)
	ret0, _ := ret[0].(repositories.IContainerRepository)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockIContainerRepositoryMockRecorder) WithTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockIContainerRepository)(nil).WithTransaction), tx)
}
